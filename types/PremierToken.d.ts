/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {Contract, ContractTransaction, EventFilter, Signer} from "ethers";
import {Listener, Provider} from "ethers/providers";
import {Arrayish, BigNumber, BigNumberish, Interface} from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface PremierTokenInterface extends Interface {
  functions: {
    addAdmin: TypedFunctionDescription<{encode([account]: [string]): string}>;

    addBurner: TypedFunctionDescription<{encode([account]: [string]): string}>;

    addMinter: TypedFunctionDescription<{encode([account]: [string]): string}>;

    admins: TypedFunctionDescription<{encode([]: []): string}>;

    balanceOf: TypedFunctionDescription<{encode([account]: [string]): string}>;

    burnFrom: TypedFunctionDescription<{
      encode([account, amount]: [string, BigNumberish]): string;
    }>;

    burners: TypedFunctionDescription<{encode([]: []): string}>;

    decimals: TypedFunctionDescription<{encode([]: []): string}>;

    isAdmin: TypedFunctionDescription<{encode([account]: [string]): string}>;

    isBurner: TypedFunctionDescription<{encode([account]: [string]): string}>;

    isMinter: TypedFunctionDescription<{encode([account]: [string]): string}>;

    isOwner: TypedFunctionDescription<{encode([]: []): string}>;

    mintTo: TypedFunctionDescription<{
      encode([account, amount]: [string, BigNumberish]): string;
    }>;

    minters: TypedFunctionDescription<{encode([]: []): string}>;

    name: TypedFunctionDescription<{encode([]: []): string}>;

    owner: TypedFunctionDescription<{encode([]: []): string}>;

    pause: TypedFunctionDescription<{encode([]: []): string}>;

    paused: TypedFunctionDescription<{encode([]: []): string}>;

    removeAdmin: TypedFunctionDescription<{
      encode([account]: [string]): string;
    }>;

    removeBurner: TypedFunctionDescription<{
      encode([account]: [string]): string;
    }>;

    removeMinter: TypedFunctionDescription<{
      encode([account]: [string]): string;
    }>;

    symbol: TypedFunctionDescription<{encode([]: []): string}>;

    totalSupply: TypedFunctionDescription<{encode([]: []): string}>;

    transfer: TypedFunctionDescription<{
      encode([_to, _value]: [string, BigNumberish]): string;
    }>;

    unpause: TypedFunctionDescription<{encode([]: []): string}>;
  };

  events: {
    AdminAdded: TypedEventDescription<{
      encodeTopics([account]: [string | null]): string[];
    }>;

    AdminRemoved: TypedEventDescription<{
      encodeTopics([account]: [string | null]): string[];
    }>;

    Burn: TypedEventDescription<{
      encodeTopics([burner, account, amount]: [
        string | null,
        string | null,
        null
      ]): string[];
    }>;

    BurnerAdded: TypedEventDescription<{
      encodeTopics([account]: [string | null]): string[];
    }>;

    BurnerRemoved: TypedEventDescription<{
      encodeTopics([account]: [string | null]): string[];
    }>;

    Mint: TypedEventDescription<{
      encodeTopics([minter, account, amount]: [
        string | null,
        string | null,
        null
      ]): string[];
    }>;

    MinterAdded: TypedEventDescription<{
      encodeTopics([account]: [string | null]): string[];
    }>;

    MinterRemoved: TypedEventDescription<{
      encodeTopics([account]: [string | null]): string[];
    }>;

    Paused: TypedEventDescription<{encodeTopics([account]: [null]): string[]}>;

    Transfer: TypedEventDescription<{
      encodeTopics([from, to, value]: [
        string | null,
        string | null,
        null
      ]): string[];
    }>;

    Unpaused: TypedEventDescription<{
      encodeTopics([account]: [null]): string[];
    }>;
  };
}

export class PremierToken extends Contract {
  connect(signerOrProvider: Signer | Provider | string): PremierToken;
  attach(addressOrName: string): PremierToken;
  deployed(): Promise<PremierToken>;

  on(event: EventFilter | string, listener: Listener): PremierToken;
  once(event: EventFilter | string, listener: Listener): PremierToken;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): PremierToken;
  removeAllListeners(eventName: EventFilter | string): PremierToken;
  removeListener(eventName: any, listener: Listener): PremierToken;

  interface: PremierTokenInterface;

  functions: {
    addAdmin(
      account: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    addBurner(
      account: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    addMinter(
      account: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    admins(): Promise<string[]>;

    balanceOf(account: string): Promise<BigNumber>;

    burnFrom(
      account: string,
      amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    burners(): Promise<string[]>;

    decimals(): Promise<number>;

    isAdmin(account: string): Promise<boolean>;

    isBurner(account: string): Promise<boolean>;

    isMinter(account: string): Promise<boolean>;

    isOwner(): Promise<boolean>;

    mintTo(
      account: string,
      amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    minters(): Promise<string[]>;

    name(): Promise<string>;

    owner(): Promise<string>;

    pause(overrides?: TransactionOverrides): Promise<ContractTransaction>;

    paused(): Promise<boolean>;

    removeAdmin(
      account: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    removeBurner(
      account: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    removeMinter(
      account: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    symbol(): Promise<string>;

    totalSupply(): Promise<BigNumber>;

    transfer(
      _to: string,
      _value: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    unpause(overrides?: TransactionOverrides): Promise<ContractTransaction>;
  };

  addAdmin(
    account: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  addBurner(
    account: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  addMinter(
    account: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  admins(): Promise<string[]>;

  balanceOf(account: string): Promise<BigNumber>;

  burnFrom(
    account: string,
    amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  burners(): Promise<string[]>;

  decimals(): Promise<number>;

  isAdmin(account: string): Promise<boolean>;

  isBurner(account: string): Promise<boolean>;

  isMinter(account: string): Promise<boolean>;

  isOwner(): Promise<boolean>;

  mintTo(
    account: string,
    amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  minters(): Promise<string[]>;

  name(): Promise<string>;

  owner(): Promise<string>;

  pause(overrides?: TransactionOverrides): Promise<ContractTransaction>;

  paused(): Promise<boolean>;

  removeAdmin(
    account: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  removeBurner(
    account: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  removeMinter(
    account: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  symbol(): Promise<string>;

  totalSupply(): Promise<BigNumber>;

  transfer(
    _to: string,
    _value: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  unpause(overrides?: TransactionOverrides): Promise<ContractTransaction>;

  filters: {
    AdminAdded(account: string | null): EventFilter;

    AdminRemoved(account: string | null): EventFilter;

    Burn(
      burner: string | null,
      account: string | null,
      amount: null
    ): EventFilter;

    BurnerAdded(account: string | null): EventFilter;

    BurnerRemoved(account: string | null): EventFilter;

    Mint(
      minter: string | null,
      account: string | null,
      amount: null
    ): EventFilter;

    MinterAdded(account: string | null): EventFilter;

    MinterRemoved(account: string | null): EventFilter;

    Paused(account: null): EventFilter;

    Transfer(from: string | null, to: string | null, value: null): EventFilter;

    Unpaused(account: null): EventFilter;
  };

  estimate: {
    addAdmin(account: string): Promise<BigNumber>;

    addBurner(account: string): Promise<BigNumber>;

    addMinter(account: string): Promise<BigNumber>;

    admins(): Promise<BigNumber>;

    balanceOf(account: string): Promise<BigNumber>;

    burnFrom(account: string, amount: BigNumberish): Promise<BigNumber>;

    burners(): Promise<BigNumber>;

    decimals(): Promise<BigNumber>;

    isAdmin(account: string): Promise<BigNumber>;

    isBurner(account: string): Promise<BigNumber>;

    isMinter(account: string): Promise<BigNumber>;

    isOwner(): Promise<BigNumber>;

    mintTo(account: string, amount: BigNumberish): Promise<BigNumber>;

    minters(): Promise<BigNumber>;

    name(): Promise<BigNumber>;

    owner(): Promise<BigNumber>;

    pause(): Promise<BigNumber>;

    paused(): Promise<BigNumber>;

    removeAdmin(account: string): Promise<BigNumber>;

    removeBurner(account: string): Promise<BigNumber>;

    removeMinter(account: string): Promise<BigNumber>;

    symbol(): Promise<BigNumber>;

    totalSupply(): Promise<BigNumber>;

    transfer(_to: string, _value: BigNumberish): Promise<BigNumber>;

    unpause(): Promise<BigNumber>;
  };
}
