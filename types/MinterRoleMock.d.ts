/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface MinterRoleMockInterface extends Interface {
  functions: {
    addAdmin: TypedFunctionDescription<{ encode([account]: [string]): string }>;

    addMinter: TypedFunctionDescription<{
      encode([account]: [string]): string;
    }>;

    admins: TypedFunctionDescription<{ encode([]: []): string }>;

    isAdmin: TypedFunctionDescription<{ encode([account]: [string]): string }>;

    isMinter: TypedFunctionDescription<{ encode([account]: [string]): string }>;

    isOwner: TypedFunctionDescription<{ encode([]: []): string }>;

    minters: TypedFunctionDescription<{ encode([]: []): string }>;

    owner: TypedFunctionDescription<{ encode([]: []): string }>;

    removeAdmin: TypedFunctionDescription<{
      encode([account]: [string]): string;
    }>;

    removeMinter: TypedFunctionDescription<{
      encode([account]: [string]): string;
    }>;
  };

  events: {
    AdminAdded: TypedEventDescription<{
      encodeTopics([account]: [string | null]): string[];
    }>;

    AdminRemoved: TypedEventDescription<{
      encodeTopics([account]: [string | null]): string[];
    }>;

    MinterAdded: TypedEventDescription<{
      encodeTopics([account]: [string | null]): string[];
    }>;

    MinterRemoved: TypedEventDescription<{
      encodeTopics([account]: [string | null]): string[];
    }>;
  };
}

export class MinterRoleMock extends Contract {
  connect(signerOrProvider: Signer | Provider | string): MinterRoleMock;
  attach(addressOrName: string): MinterRoleMock;
  deployed(): Promise<MinterRoleMock>;

  on(event: EventFilter | string, listener: Listener): MinterRoleMock;
  once(event: EventFilter | string, listener: Listener): MinterRoleMock;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): MinterRoleMock;
  removeAllListeners(eventName: EventFilter | string): MinterRoleMock;
  removeListener(eventName: any, listener: Listener): MinterRoleMock;

  interface: MinterRoleMockInterface;

  functions: {
    addAdmin(
      account: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    addMinter(
      account: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    admins(): Promise<string[]>;

    isAdmin(account: string): Promise<boolean>;

    isMinter(account: string): Promise<boolean>;

    isOwner(): Promise<boolean>;

    minters(): Promise<string[]>;

    owner(): Promise<string>;

    removeAdmin(
      account: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    removeMinter(
      account: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  addAdmin(
    account: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  addMinter(
    account: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  admins(): Promise<string[]>;

  isAdmin(account: string): Promise<boolean>;

  isMinter(account: string): Promise<boolean>;

  isOwner(): Promise<boolean>;

  minters(): Promise<string[]>;

  owner(): Promise<string>;

  removeAdmin(
    account: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  removeMinter(
    account: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    AdminAdded(account: string | null): EventFilter;

    AdminRemoved(account: string | null): EventFilter;

    MinterAdded(account: string | null): EventFilter;

    MinterRemoved(account: string | null): EventFilter;
  };

  estimate: {
    addAdmin(account: string): Promise<BigNumber>;

    addMinter(account: string): Promise<BigNumber>;

    admins(): Promise<BigNumber>;

    isAdmin(account: string): Promise<BigNumber>;

    isMinter(account: string): Promise<BigNumber>;

    isOwner(): Promise<BigNumber>;

    minters(): Promise<BigNumber>;

    owner(): Promise<BigNumber>;

    removeAdmin(account: string): Promise<BigNumber>;

    removeMinter(account: string): Promise<BigNumber>;
  };
}
